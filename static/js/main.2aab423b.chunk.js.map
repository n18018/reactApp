{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","data","value","daiya","loadedJSON","err","res","_this","setState","body","getWeather","lat","lon","params","APPID","lang","units","request","get","query","end","_this2","this","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","error","console","log","enableHighAccuracy","timeout","maximumAge","_this3","react_default","a","createElement","className","onSubmit","e","doSubmit","type","onChenge","doChange","JSON","stringify","form","onChange","App_CountryView","App_LocateView","App_NormalView","App_SkyView","App_WindView","App_TempmaxView","App_TempminView","target","Component","NormalView","props","weather","main","SkyView","description","LocateView","name","WindView","wind","speed","CountryView","sys","country","TempmaxView","temp_max","TempminView","temp_min","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2aab423b.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\nimport request from 'superagent'\n\nclass App extends Component {\n    state = {\n        data : null,\n        value: '',\n        daiya: null\n    }\n        /*, '国': res.body.data.sys.country, 'ロケーション': res.body.data.name, '今日の天気': res.body.weather.main, '空の模様': res.body.weather.description, '雲の量': res.body.clouds.all, '風速': res.body.wind.speed, '最高気温': res.body.main.temp_max, '最低気温': res.body.main.temp_min\n        */\n    loadedJSON = (err, res) => this.setState({data:res.body})\n    getWeather = (lat, lon) => {\n        const URI = 'http://api.openweathermap.org/data/2.5/weather'\n        const KEY = '17cd1d8dc13bd4f2db89938ae3526497'\n        const params = {\n            'APPID':KEY,\n            'lang':'ja',\n            'units':'metric',\n            'lat':lat,\n            'lon':lon\n        }\n        request.get(URI)\n            .query(params)\n            .end(this.loadedJSON)\n    }\n    componentWillMount () {\n        navigator.geolocation.getCurrentPosition(\n            (pos) => this.getWeather(pos.coords.latitude, pos.coords.longitude),\n            (error) => console.log(error),\n            {\n                \"enableHighAccuracy\": false,\n                \"timeout\": 8000,\n                \"maximumAge\": 2000,\n            }\n        )\n    }\n    render() {\n        if (!this.state.data) return (\n            <div className = 'App' >\n            <form onSubmit={e => this.doSubmit(e)}>\n                <input type='text' onChenge={e => this.doChange(e)} />\n                <input type='submit' />\n            </form>\n        </div>\n        )\n            console.log(this.state.value)\n        console.log('render')\n        console.log(JSON.stringify(this.state.data))\n        console.log(JSON.stringify(this.state.value))\n        const form = () => {\n            return (\n            <form onSubmit={e => this.doSubmit(e)}>\n                <input type='text' onChange={e => this.doChange(e)} />\n            </form>\n            )\n        }\n\n        if (this.state.value === '国'){\n        return (\n            <div className=\"App\">\n                {form()}\n                <CountryView data = {this.state.data} />\n            </div>\n        )\n        } else if (this.state.value === '場所'){\n            return (\n            <div className=\"App\">\n                {form()}\n                <LocateView data = {this.state.data} />\n            </div>)\n        } else if (this.state.value === '天気'){\n            return (\n            <div className=\"App\">\n                {form()}\n                <NormalView data = {this.state.data} />\n            </div>)\n        } else if (this.state.value === '空'){\n            return (\n            <div className=\"App\">\n                {form()}\n                <SkyView data = {this.state.data} />\n            </div>)\n        } else if (this.state.value === '風'){\n            return (\n            <div className=\"App\">\n                {form()}\n                <WindView data = {this.state.data} />\n            </div>)\n        } else if (this.state.value === '最高気温'){\n            return (\n            <div className=\"App\">\n                {form()}\n                <TempmaxView data = {this.state.data} />\n            </div>)\n        } else if (this.state.value === '最低気温'){\n            return (\n            <div className=\"App\">\n                {form()}\n                <TempminView data = {this.state.data} />\n            </div>)\n        }\n        return (\n            <div className=\"App\">\n                {form()}\n                <p>\"検索キーワード\"</p>\n                <p>\"現在地の気象情報\"</p>\n                <p>国</p>\n                <p>場所</p>\n                <p>天気</p>\n                <p>空</p>\n                <p>風</p>\n                <p>最高気温</p>\n                <p>最低気温</p>\n            </div>\n        )\n    }\n    doChange(e) {\n        console.log('err')\n    this.setState({value:e.target.value})\n    }\n}\n    /*\n                */\n\nclass TextForm extends Component {\n    state = {value:''}\n    render () {\n    return (\n        <form onSubmit={e => this.doSubmit(e)}>\n            <input type='text' onChenge={e => this.doChange(e)} />\n            <input type='submit' />\n        </form>\n    )\n    }\n    doSubmit(e) {\n    }\n    doChange(e) {\n    this.setState({value:e.target.value})\n    }\n}\n\n//const InputView = props => {\n//return <input className=\"input\" type='text' onChange = {props.handleUpdate}/>\n//}\n\nconst NormalView = props => {\n    let weather = props.data.weather[0]\n    //console.log(JSON.stringify(props.data))\n    return <div className=\"Normal\">今日の天気:{weather.main}</div>\n}\n\nconst SkyView = props => {\n    let weather = props.data.weather[0]\n    //console.log(JSON.stringify(weather))\n    return <div className=\"Sky\">空の様子:{weather.description}</div>\n}\n\nconst LocateView = props => {\n    let weather = props.data.weather[0]\n    //console.log(JSON.stringify(props.data))\n    return <div className=\"Locate\">ロケーション:{props.data.name}</div>\n}\n\nconst WindView = props => {\n    let weather = props.data.weather[0]\n    //console.log(JSON.stringify(props.data))\n    return <div className=\"Wind\">風速:{props.data.wind.speed}Km</div>\n}\n\nconst CountryView = props => {\n    let weather = props.data.weather[0]\n    //console.log(JSON.stringify(props.data))\n    return <div className=\"Country\">国:{props.data.sys.country}</div>\n}\n\nconst CloudView = props => {\n    let weather = props.data.weather[0]\n    //console.log(JSON.stringify(props.data))\n    return <div className=\"Cloud\">雲の量:{props.data.clouds.all}</div>\n}\n\nconst TempmaxView = props => {\n    let weather = props.data.weather[0]\n    //console.log(JSON.stringify(props.data))\n    return <div className=\"maxTemp\">最高気温:{props.data.main.temp_max}℃</div>\n}\n\nconst TempminView = props => {\n    let weather = props.data.weather[0]\n    //console.log(JSON.stringify(props.data))\n    return <div className=\"minTemp\">最低気温:{props.data.main.temp_min}℃</div>\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}